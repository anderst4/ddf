<?xml version="1.0" encoding="UTF-8"?>
<!--
/**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version. 
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/
-->

<project name="antrun-external-build" default="createRepoZip" basedir="">

    <fail unless="ddf.release.version"/>

    <!-- Point to a local empty repo -->
    <property name="tempRepo" value="${basedir}/target/repo/ddf-distro-repo-${ddf.release.version}/repo"/>
    <property name="sourceUnzippedDir" value="${basedir}/target/sourceUnzipped"/>
    <property name="destFileName" value="ddf-distro-repo-${ddf.release.version}.zip"/>

	
	<!--
	Unzips the DDF source code that was generated from the DDF_Build_BundleSource_Profile Jenkins project
	and placed in the maven repo.
	-->
    <target name="unzipSource">
        <mkdir dir="${sourceUnzippedDir}"/>
        <unzip dest="${sourceUnzippedDir}">
            <fileset dir="${basedir}/target/dependencies-with-versions">
                <include name="**/*.zip"/>
            </fileset>
        </unzip>
    </target>

	
	<!--
	Creates the tempRepo directory and then builds the DDF source from the unzipped dependencies-with-versions zip.
	As the source is built it will pull all dependent jars from the external repo (specified in the settings.xml file)
	and put them in the local repo (tempRepo directory). Then the contents of tempRepo will be zipped up and 
	constitute the repo needed for offline builds.
	-->
    <target name="buildUsingTempRepo">
        <mkdir dir="${tempRepo}"/>
        <exec executable="mvn" failonerror="true" dir="${sourceUnzippedDir}/ddf-${ddf.release.version}">
            <arg value="clean"/>
            <arg value="install"/>
            <arg value="-Dmaven.repo.local=${tempRepo}"/>
        </exec>
        <!-- <delete dir="${tempRepo}/ddf"/> -->
    	<delete includeemptydirs="true">
            <fileset dir="${tempRepo}/ddf" excludes="thirdparty/" >
			</fileset>
		</delete>
    </target>

	
    <target name="fixDecoderException">
        <copy file="${basedir}/src/main/resources/commons-httpclient-3.1.pom"
              todir="${tempRepo}/commons-httpclient/commons-httpclient/3.1"/>
    </target>

	
	<!--
	Creates a zip of the local repo (tempRepo) generated during the build of the DDF source code and the
	aasociated settings.xml file that will point to this local repo for offline builds.
	-->
    <target name="createZip">
        <mkdir dir="${basedir}/target/config"/>
        <copy file="${basedir}/src/main/resources/settings.xml" todir="${basedir}/target/config"/>
        <echo message="creating distro artifact"/>

        <zip destfile="${basedir}/target/${destFileName}">
            <zipfileset dir="${basedir}/target/repo/ddf-distro-repo-${ddf.release.version}/repo"
                        prefix="ddf-distro-repo-${ddf.release.version}/repo"/>
            <zipfileset dir="${basedir}/target/config" prefix="ddf-distro-repo-${ddf.release.version}/config"/>
        </zip>
    </target>

    <target name="createRepoZip">
        <antcall target="unzipSource" inheritRefs="true" inheritAll="true"/>
        <antcall target="buildUsingTempRepo" inheritRefs="true" inheritAll="true"/>
        <antcall target="fixDecoderException" inheritRefs="true" inheritAll="true"/>
        <antcall target="createZip" inheritRefs="true" inheritAll="true"/>
    </target>

</project>
