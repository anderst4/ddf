<?xml version="1.0" encoding="UTF-8"?>
<!-- /**
 * Copyright (c) Codice Foundation
 *
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either
 * version 3 of the License, or any later version. 
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 *
 **/ -->
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
 
 
<module name="Checker">
    
    <!--XML Header checks -->
    <module name="RegexpHeader">
        <property name="headerFile" value="${checkstyle.header.file}"/>
        <!-- Line 1:  This allows the file to have zero or more blank lines. -->
        <!-- Line 2:  This allows a line for the XML declaration, but does not require it. -->
        <!-- Line 3:  This allows a line that starts an XML comment block, but does not require it.-->
        <!-- Line 18: This allows a line that ends an XML comment block, but does not require it.-->
        <property name="multiLines" value="1,2,3,18"/> 
        <property name="fileExtensions" value="java, xml" />
    </module>
	
	<module name="RegexpMultiline">
      <property name="format" value="\.printStackTrace\(\s*\)"/>
      <property name="message" value="printStackTrace directs output to the console and should be replaced with logger debugging."/>
    </module>
	
	
	<module name="TreeWalker">

	</module>
    
    <!-- ***** Checkstyle Rules for Servicemix *****-->
    
    <!-- Checks whether files end with a new line.                        -->
    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
    <!--
     <module name="NewlineAtEndOfFile"/>
     -->
    
    <!-- Checks that property files contain the same keys.         -->
    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
    <!-- Shouldn't be needed as we only support English and don't really use property files
    <module name="Translation"/>
     -->
    
    <!--<module name="StrictDuplicateCode"/>-->
    
    <module name="TreeWalker">
        
        <!-- Checks for Javadoc comments.                     -->
        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
        <!--
         <module name="PackageHtml"/>
         <module name="JavadocMethod"/>
         <module name="JavadocType"/>
         <module name="JavadocVariable"/>
         <module name="JavadocStyle"/>
         -->
        
        
        <!-- Checks for Naming Conventions.                  -->
        <!-- See http://checkstyle.sf.net/config_naming.html -->
        <!--  XXX 
        <module name="ConstantName"/>
        -->
        <module name="LocalFinalVariableName">
        	<property name="severity" value="warning"/>
        </module>
        <module name="LocalVariableName"/>
        <module name="MemberName">
        	<property name="severity" value="warning"/>
        </module>
        <module name="MethodName">
        	<property name="severity" value="warning"/>
        </module>
        <module name="PackageName"/>
        <module name="ParameterName"/>
        <!--  XXX 
        <module name="StaticVariableName"/>
        -->
        <module name="TypeName">
        	<property name="severity" value="warning"/>
        </module>
        
        <!-- Header checks 
        <module name="RegexpHeader">
            <property name="headerFile"
            value="${checkstyle.header.file}"/>
        </module>
         -->
        
        
        <!-- Checks for imports                              -->
        <!-- See http://checkstyle.sf.net/config_import.html -->
        <module name="AvoidStarImport">
            <property name="excludes" value="java.io,java.util,java.net,java.nio,java.nio.channels,java.lang.reflect,org.w3c.dom,org.xml.sax,java.awt,javax.swing,junit.framework,org.junit.Assert"/>
        </module>
        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
        <module name="RedundantImport">
        	<property name="severity" value="warning"/>
        </module>
        <!--  XXX 
        <module name="UnusedImports"/>
        <module name="ImportOrder">
            <property name="groups" value="java,javax,org.w3c,org.xml,junit"/>
            <property name="ordered" value="true"/>
        </module>
        -->
        <!--
         <module name="ImportControl">
         <property name="file" value="etc/import-control.xml"/>
         </module>
         -->
        
        
        <!-- Checks for Size Violations.                    -->
        <!-- See http://checkstyle.sf.net/config_sizes.html -->
        <!-- XXX 
        <module name="AnonInnerLength">
            <property name="max" value="40"/>
        </module>
        -->
        <module name="ExecutableStatementCount">
        	<property name="severity" value="warning"/>
            <property name="max" value="75"/>
        </module>
        <!--
        <module name="FileLength">
            <property name="max" value="3000"/>
        </module>
         -->
        <module name="LineLength">
            <property name="max" value="100"/>
            <property name="ignorePattern" value="^*&quot;*&quot;*$"/>
            <!--  
            <property name="ignorePattern" value="^\s*&quot;|^*&quot;$|^\s*|^\s*\*\s*[^\s]+.+$|^\s*protected|^\s*public|^\s*private|^\s*//"/>
            -->
        </module>
        <module name="MethodLength">
        	<property name="severity" value="warning"/>
            <property name="max" value="150"/>
            <property name="countEmpty" value="false"/>
        </module>
        <module name="ParameterNumber">
        	<property name="severity" value="warning"/>
            <property name="max" value="7"/>
            <property name="tokens" value="METHOD_DEF"/>
        </module>
        
        <!-- Checks for whitespace                               -->
        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
        <module name="EmptyForIteratorPad"/>
        <module name="EmptyForInitializerPad"/>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
            <property name="tokens" value="ARRAY_INIT,BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
        </module>
        <module name="NoWhitespaceBefore"/>
        <!-- XXX 
        <module name="OperatorWrap"/>
        -->
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <!--
        <module name="TabCharacter"/>
         -->
        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI"/>
        </module>
        <module name="WhitespaceAround">
        	<property name="severity" value="warning"/>
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_ASSERT, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR, SR_ASSIGN, STAR, STAR_ASSIGN,TYPE_EXTENSION_AND"/>
        </module>
        
        
        <!-- Modifier Checks                                    -->
        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
        <module name="ModifierOrder"/>
        <!--  XXX 
        <module name="RedundantModifier"/>
        -->
        
        
        <!-- Checks for blocks. You know, those {}'s         -->
        <!-- See http://checkstyle.sf.net/config_blocks.html -->
        <module name="AvoidNestedBlocks">
            <property name="allowInSwitchCase" value="true"/>
        </module>
        <module name="EmptyBlock">
        	<property name="severity" value="warning"/>
            <property name="option" value="text"/>
        </module>
        <module name="LeftCurly">
        	<property name="severity" value="warning"/>
        </module>
        <!--  XXX 
        <module name="NeedBraces"/>
        -->
        <module name="RightCurly">
            <property name="severity" value="warning"/>
        </module>
        
        
        <!-- Checks for common coding problems               -->
        <!-- See http://checkstyle.sf.net/config_coding.html -->
        <!--<module name="ArrayTrailingComma"/>-->
        <!--<module name="AvoidInlineConditionals"/>-->
        <module name="CovariantEquals"/>
        <module name="DoubleCheckedLocking"/>
        <module name="EmptyStatement"/>
        <module name="EqualsHashCode"/>
        <!--<module name="FinalLocalVariable"/>-->
        
        <module name="HiddenField">
        	<property name="severity" value="warning"/>
            <property name="ignoreConstructorParameter" value="true"/>
            <property name="ignoreSetter" value="true"/>
        </module>
        
        <module name="IllegalInstantiation"/>
        <!--<module name="IllegalToken"/>-->
        <!--<module name="IllegalTokenText"/>-->
        <!-- XXX 
        <module name="InnerAssignment"/>
        -->
        <!--<module name="MagicNumber"/>-->
        <module name="MissingSwitchDefault">
        	<property name="severity" value="warning"/>
        </module>
        <!--module name="ModifiedControlVariable"/-->
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>
        <module name="StringLiteralEquality"/>
        <module name="NestedIfDepth">
        	<property name="severity" value="warning"/>
            <property name="max" value="3"/>
        </module>
        <module name="NestedTryDepth">
            <property name="max" value="3"/>
        </module>
        <!--  XXX 
        <module name="SuperClone"/>
        -->
        <module name="SuperFinalize"/>
        <!--<module name="IllegalCatch"/>-->
        <module name="IllegalThrows">
            <property name="illegalClassNames" value="java.lang.Error,java.lang.RuntimeException"/>
        </module>
        <!--<module name="RedundantThrows"/>-->
        <module name="PackageDeclaration"/>
        <module name="JUnitTestCase">
        	<property name="severity" value="warning"/>
        </module>
        <!-- XXX 
        <module name="ReturnCount">
            <property name="max" value="6"/>
        </module>
        -->
        <!-- XXX
        <module name="IllegalType">
            <property name="format" value="^xxx$"/>
            <property name="illegalClassNames" value="java.util.GregorianCalendar, java.util.Hashtable, java.util.HashSet, java.util.HashMap, java.util.ArrayList, java.util.LinkedList, java.util.LinkedHashMap, java.util.LinkedHashSet, java.util.TreeSet, java.util.TreeMap"/>
        </module>
        -->
        <!--  XXX 
        <module name="DeclarationOrder"/>
        -->
        <!--<module name="ParameterAssignment"/>-->
        <!--  XXX 
        <module name="ExplicitInitialization"/>
        -->
        <module name="DefaultComesLast"/>
        <!--<module name="MissingCtor"/>-->
        <module name="FallThrough">
        	<property name="severity" value="warning"/>
        </module>
        <!--<module name="MultipleStringLiterals"/>-->
        <!-- XXX 
        <module name="MultipleVariableDeclarations"/>
        -->
        <!--<module name="RequireThis"/>-->
        <!-- XXX 
        <module name="UnnecessaryParentheses"/>
        -->
        
        
        
        <!-- Checks for class design                         -->
        <!-- See http://checkstyle.sf.net/config_design.html -->
        <!--<module name="DesignForExtension"/>-->
        <!--  XXX 
        <module name="FinalClass"/>
        
        <module name="HideUtilityClassConstructor"/>
        -->
        <module name="InterfaceIsType">
        	<property name="severity" value="warning"/>
        </module>
        <module name="MutableException">
        	<property name="severity" value="warning"/>
        </module>
        <module name="ThrowsCount">
        	<property name="severity" value="warning"/>
        	<property name="max" value="5"/>
        </module>
        <module name="VisibilityModifier">
        	<property name="severity" value="warning"/>
            <property name="protectedAllowed" value="true"/>
            <property name="packageAllowed" value="true"/>
			<!-- this is needed for the resource injection unit tests.  It will removed
             when private member inject is supported.
             -->
    		<property name="publicMemberPattern" value="watchman"/>
        </module>
        
        
        
        <!-- Metrics checks.                   -->
        <!-- See http://checkstyle.sf.net/config_metrics.html -->
        <module name="BooleanExpressionComplexity">
        	<property name="max" value="6"/>
        </module>
        <!--<module name="ClassDataAbstractionCoupling"/>-->
        <!--<module name="ClassFanOutComplexity"/>-->
        <!--<module name="CyclomaticComplexity"/>-->
        <!--<module name="NPathComplexity"/>-->
        <!-- XXX 
        <module name="JavaNCSS">
       		<property name="methodMaximum" value="75"/>
        </module>
        -->
        
		
        <!-- Miscellaneous other checks.                   -->
        <!-- See http://checkstyle.sf.net/config_misc.html -->
        <!--
         <module name="ArrayTypeStyle"/>
         <module name="FinalParameters"/>
         -->
        <!--
         <module name="GenericIllegalRegexp">
         <property name="format" value="\s+$"/>
         <property name="message" value="Line has trailing spaces."/>
         </module>
         -->
        <module name="TodoComment">
           	<property name="severity" value="warning"/>
			<property name="format" value="WARNING"/>
		</module>
        
        <module name="UpperEll">
        	<property name="severity" value="warning"/>
        </module>
        
        <!--Assert statement may have side effects:-->
		<module name="DescendantToken">
    		<property name="tokens" value="LITERAL_ASSERT"/>
		    <property name="limitedTokens" value="ASSIGN,DEC,INC,POST_DEC,POST_INC,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,BSR_ASSIGN,SR_ASSIGN,SL_ASSIGN,BAND_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN"/>
		    <property name="maximumNumber" value="0"/>
		</module>
        
        <!--<module name="UncommentedMain"/>-->
        <!--module name="TrailingComment"/-->
        <module name="Indentation">
            <property name="caseIndent" value="0"/>
            <property name="severity" value="warning"/>
        </module>
                
    </module>
    
    <!--<module name="RequiredRegexp">-->
    
    <!--Regexp to prevent printStackTrace and System.out.println-->
    <module name="RegexpSingleline">
        <property name="format" value="printStackTrace"/>
        <property name="message" value="printStackTrace not allowed"/>
    </module>
    <module name="RegexpSingleline">
    	<property name="severity" value="warning"/>
        <property name="format" value="System.out.println"/>
        <property name="message" value="System.out.println not allowed"/>
    </module>


</module>
